# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# BSD 3-Clause License
#
# Copyright (c) 2018, CSIRT-MU, Masaryk University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# """
# This script serves as an input for Vagrant provisioner to deploy whole TraceCreator framework.
#
# All configuration should be set in "./provision.yml" file. Please don't change the code below unless you
# know what you're doing.
#
# Provisioning may take a long time, do not stop it or suspend it earlier, it
# can cause unexpected behavior.
#
#
# Usage:
#  * vagrant up              -- deploy and provision the framework
#  * vagrant up <node name>  -- deploy and provision specified node
#  * vagrant halt            -- stop the running framework
#  * vagrant destroy         -- destroy the deployed framework
#  * vagrant -h              -- show common vagrant commands
# """


require 'yaml'  # YAML configuration parser


class TraceCreatorProvisioning
	# """
	# Class for Ansible and bash provisioning of TraceCreator to provision based on configuration file.
	# """

	def initialize(configuration)
		# """
		# Initialize class based on the given configuration.
		#
		# :param configuration: Parsed configuration in dictionary format
		# """
		# Store configuration settings
		@provision_configuration = configuration
	end

	def install_python(virtual_guest)
		# """
		# Install python on given guest using standard shell provisioning.
		#
		# :param virtual_guest: Initialized Vagrant guest
		# """
		virtual_guest.vm.provision "shell" do |s|
				s.inline = "apt-get update && apt-get install -y python"
		end
	end

	def run_ansible(virtual_guest, playbook)
		# """
		# Run ansible on given guest.
		#
		# :param virtual_guest: Initialized Vagrant guest
		# :param playbook: Ansible playbook
		# """
		# Check if playbook is defined
		if playbook
	        # Run Ansible provisioning
		    virtual_guest.vm.provision :ansible_local do |ansible|
			    ansible.playbook = playbook
		    end
		end
	end

	def run_bash(virtual_guest, playbook)
		# """
		# Run bash commands on given guest.
		#
		# :param virtual_guest: Initialized Vagrant guest
		# :param playbook: Bash configuration file
		# """
		# Check if playbook is defined
		if playbook
	        # Run bash commands
		    virtual_guest.vm.provision :shell, path: playbook
		end
	end

	def provision(virtual_guest)
		# """
		# Run provisioning on given guest.
		#
		# :param virtual_guest: Initialized Vagrant guest
		# """
		# Install python to guest (necessary to run ansible_local)
		install_python(virtual_guest)
		# Get guest type
		guest_type = (virtual_guest.vm.hostname).start_with?("defender") ? "defenders" : "attacker"
		# Run ansible provisioning
		run_ansible(virtual_guest, @provision_configuration[guest_type]["ansible"])
		# Run bash provisioning
		run_bash(virtual_guest, @provision_configuration[guest_type]["bash"])
	end
end


# """
# All Vagrant configuration is done below.
#
# The "2" in Vagrant.configure configures the configuration version (Vagrant
# support older styles for backwards compatibility). Please don't change it
# unless you know what you're doing.
# """
Vagrant.configure("2") do |config|
	# For a complete reference of configuration, please see the online documentation at https://docs.vagrantup.com

	# Load Vagrant configuration
	provision_config = YAML.load_file("configuration/provision.yml")

	# Create TraceCreator provisioning object
	trace_creator_provisioning = TraceCreatorProvisioning.new(provision_config)

    # IP address range definition of defender guests
	defender_upper_ip_limit = 101 + provision_config["defenders"]["number"] - 1

	# Iterate over defender guests
	(101..defender_upper_ip_limit).each do |i|
	    # Generate guest name and IP address
		defender_hostname = "defender#{i}"
		defender_ip = "#{provision_config["defenders"]["ip_prefix"]}#{i}"

		# Deployment of "defenderXXX" guest
		config.vm.define "defender#{i}" do |defender|
			defender.vm.hostname = defender_hostname
            defender.vm.box = provision_config["defenders"]["box"]
            defender.vm.box_url = provision_config["defenders"]["box_url"]
			defender.vm.network :private_network, ip: defender_ip, netmask: provision_config["common"]["mask"]

			defender.vm.provider :virtualbox do |v|
				v.customize ["modifyvm", :id, "--memory", provision_config["defenders"]["memory"]]
				v.customize ["modifyvm", :id, "--cpus", provision_config["defenders"]["cpu"]]
				v.customize ["modifyvm", :id, "--name", "defender#{i}"]
                v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]  # Set adapter to promiscuous mode
			end

			# Run provisioning
            trace_creator_provisioning.provision(defender)
		end
	end

	# Deployment of "attacker" guest
	config.vm.define "attacker" do |attacker|
		attacker.vm.hostname = "attacker"
		attacker.vm.box = provision_config["attacker"]["box"]
        attacker.vm.box_url = provision_config["attacker"]["box_url"]
		attacker.vm.network :private_network, ip: provision_config["attacker"]["ip"], netmask: provision_config["common"]["mask"]

		attacker.vm.provider :virtualbox do |v|
			v.customize ["modifyvm", :id, "--memory", provision_config["attacker"]["memory"]]
			v.customize ["modifyvm", :id, "--cpus", provision_config["attacker"]["cpu"]]
			v.customize ["modifyvm", :id, "--name", "attacker"]
			v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]  # Set adapter to promiscuous mode
		end

		# Run provisioning
        trace_creator_provisioning.provision(attacker)

		# Run traffic generation script
		attacker.vm.provision :shell do |s|
			# PYTHONUNBUFFERED: make ansible display real-time output of shell
            s.inline = "export PYTHONUNBUFFERED=1; python /vagrant/generator.py"
        end
	end
end
